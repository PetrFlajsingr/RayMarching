#version 450

layout (local_size_x = 32, local_size_y = 32) in;
layout (rgba32f, binding = 0) uniform image2D renderTexture;
layout (r32f, binding = 1) uniform image2D stepCountTexture;
layout (r32f, binding = 2) uniform image2D depthTexture;

uniform int shadowType;

uniform ivec2 resolution;
uniform int stepLimit;
uniform int shadowStepLimit;

uniform float time;
uniform float maxDrawDistance;

uniform vec3 cameraPosition;
uniform vec3 cameraFront;

uniform bool enableAmbientOcclusion;
uniform bool enableAntiAliasing;

uniform float AA_size;

const vec3 lightPos = vec3(0, 25, 1 + cos(time / 10) * 100);// TODO

#define SHADES 0

#define EPSILON  0.00001
#define SHADOW_FALLOFF 0.05
#define SHADOW_OPACITY 0.8

struct RenderResult {
    vec4 color;
    float depth;
    int stepCount;
};
struct IntersectionResult {
    float minDist;
    float mat;
    int steps;
};


vec3 getCameraRayDir(vec2 coord, vec3 camPos, vec3 camForward) {
    const vec3 camRight = normalize(cross(vec3(0.0, 1.0, 0.0), camForward));
    const vec3 camUp = normalize(cross(camForward, camRight));
    const float fPersp = 2;// TODO
    const vec3 vDir = normalize(coord.x * camRight + coord.y * camUp + camForward * fPersp);
    return vDir;
}

mat4 rotateY(float theta) {
    float c = cos(theta);
    float s = sin(theta);

    return mat4(
    vec4(c, 0, s, 0),
    vec4(0, 1, 0, 0),
    vec4(-s, 0, c, 0),
    vec4(0, 0, 0, 1)
    );
}

vec2 distToObjects(vec3 camPos) {
    //return vec2(sierpinski(camPos).x);
    //return vec2(camPos.y - sin(camPos.x  + time * 0.000000001) - sin(camPos.z));
    const float sphere1X = 3 + cos(time) * 5;
    vec2 d = vec2(sdSphere(camPos-vec3(sphere1X, -2.5, 10), 2.5));
    d = opUnion(d, vec2(sdSphere(camPos-vec3(-3, -2.5, 10), 2.5)));
    d = opUnion(d, vec2(sdSphere(camPos-vec3(0, 2, 10), 2.5)));
    d = opUnion(d, vec2(sdPlane(camPos, vec4(0, 1.4, 0, 10))));

    vec3 repeatC = repeatCoord(camPos, vec3(100, 10, 100));
    vec2 a = vec2(sdBox(repeatC, vec3(5, 10, 5)));
    vec2 b = opIntersection(a, vec2(sdBox(camPos - vec3(0, -5 + cos(time) * 50, 0), vec3(1000, 10, 1000))));
    vec2 c = opIntersection(a, vec2(sdBox(camPos - vec3(0, -5 + sin(time) * 50, 0), vec3(1000, 10, 1000))));
    d = opSmoothSubtraction(c, d, 50);
    d = opBlend(d, b);

    return d;
    //return repeatingSphere(camPos, vec3(20) + time * 0.00000001);
    //return vec2(sdSphere(camPos, vec3(3, -2.5, 10), 2.5));
    //return vec2(opRepeat(sdSphere(camPos, vec3(0, 0, 20), 2.5), 10.f));
}

IntersectionResult castRay(vec3 rayOrigin, vec3 rayDir) {
    float travelDistance = 0.0;
    IntersectionResult result;
    result.mat = -1.0;
    for (result.steps = 0; result.steps < stepLimit; result.steps++) {
        const vec2 res = distToObjects(rayOrigin + rayDir * travelDistance);
        travelDistance += res.x;
        result.mat = res.y;
        if (res.x < EPSILON) {
            //result.mat = -1;
            result.minDist = travelDistance;
            return result;
        } else if (travelDistance > maxDrawDistance) {
            result.mat = -1;
            result.minDist = -1.0;
            return result;
        }
    }
    result.minDist = travelDistance;
    return result;
}

IntersectionResult castReflRay(vec3 rayOrigin, vec3 rayDir) {
    float travelDistance = 0.0;
    IntersectionResult result;
    result.mat = -1.0;
    for (result.steps = 0; result.steps < stepLimit/5; result.steps++) {
        const vec2 res = distToObjects(rayOrigin + rayDir * travelDistance);
        travelDistance += res.x;
        result.mat = res.y;
        if (res.x < EPSILON) {
            //result.mat = -1;
            result.minDist = travelDistance;
            return result;
        } else if (travelDistance > maxDrawDistance) {
            result.mat = -1;
            result.minDist = -1.0;
            return result;
        }
    }
    result.minDist = travelDistance;
    return result;
}

vec3 calcNormal(vec3 pos) {
    const float c = distToObjects(pos).x;
    const vec2 delta = vec2(0.0001, 0.0);
    const float xDist = distToObjects(pos + delta.xyy).x;
    const float yDist = distToObjects(pos + delta.yxy).x;
    const float zDist = distToObjects(pos + delta.yyx).x;
    return normalize(
    vec3(
    distToObjects(pos + delta.xyy).x - distToObjects(pos - delta.xyy).x,
    distToObjects(pos + delta.yxy).x - distToObjects(pos - delta.yxy).x,
    distToObjects(pos + delta.yyx).x - distToObjects(pos - delta.yyx).x));

}

float softshadow(vec3 rayOrigin, vec3 rayDirection, float minTravel, float maxTravel, float k) {
    float res = 1.0;
    float ph = 1e20;
    int i = 0;
    for (float t = minTravel; i < shadowStepLimit && t < maxTravel; i++) {
        const float h = distToObjects(rayOrigin + rayDirection * t).x;
        if (h < EPSILON) {
            return 0.0;
        }
        const float y = h * h / (2.0 * ph);
        const float d = sqrt(h * h - y * y);
        res = min(res, k * d / max(0.0, t - y));
        ph = h;
        t += h;
    }
    return clamp(res, 0.0, 1.0);
}



float getShadowMultiplier(vec3 rayEnd, vec3 lightDir, vec3 normal){
    vec3 rayDir = lightDir;
    return softshadow(rayEnd, normalize(rayDir), 0.01, maxDrawDistance, 10);
}

float getHardShadowMultiplier(vec3 rayOrigin, vec3 rayDirection, vec3 normal) {
    rayDirection = normalize(rayDirection);
    float minTravel = 0.01;
    float maxTravel = maxDrawDistance;
    int i = 0;
    for (float t = minTravel; i < shadowStepLimit && t < maxTravel; i++) {
        const float h = distToObjects(rayOrigin + rayDirection * t).x;
        if (h < EPSILON) {
            return 0.0;
        }
        t += h;
    }
    return 1.0;
}


float calcAO(vec3 pos, vec3 nor) {
    float occ = 0.0;
    float sca = 1.0;
    for (int i = 0; i < 5; i++) {
        const float h = 0.001 + 0.15 * float(i) / 4.0;
        const float d = distToObjects(pos + h * nor).x;
        occ += (h - d) * sca;
        sca *= 0.95;
    }
    return clamp(1.0 - 1.5 * occ, 0.0, 1.0);
}

vec3 shading(vec3 pos, vec3 normal, vec3 lightDir, vec3 rayDir, bool checkShadow) {
    vec3 col;
    float shadow = 0.0;
    float shadowRayCount = 2.0;
    if (checkShadow) {
        if (shadowType == 1) {
            for (float s = 0.0; s < shadowRayCount; s++)
            {
                vec3 shadowRayOrigin = pos + normal * 0.01;
                float r = rand(vec2(rayDir.xy)) * 2.0 - 1.0;
                vec3 shadowRayDir = lightDir + vec3(1.0 * SHADOW_FALLOFF) * r;
                IntersectionResult shadowRayIntersection = castRay(shadowRayOrigin, shadowRayDir);
                if (shadowRayIntersection.mat != -1.0)
                {
                    shadow += 1.0;
                }
            }
        } else if (shadowType == 2) {
            shadow = getShadowMultiplier(pos, lightDir, normal);
        } else if (shadowType == 3) {
            shadow = getHardShadowMultiplier(pos, lightDir, normal);
        }
    } else {
        shadow = 1.0;
    }


    vec3 objectSurfaceColour = vec3(0.4, 0.8, 0.1);
    float NoL = max(dot(normal, lightDir), 0.0);
    vec3 LDirectional = vec3(0.9, 0.9, 0.8) * NoL;
    vec3 LAmbient = vec3(0.03, 0.04, 0.1);
    vec3 diffuse = (LDirectional + LAmbient);
    float specular = dot(normalize(lightPos-pos), reflect(normalize(pos-cameraPosition), normal));
    col = objectSurfaceColour;
    vec3 intensity;
    if (shadowType != 0) {
        intensity = diffuse + clamp(shadow - 0.5, 0, 1)  * vec3(1.0)*(0.25*pow(clamp(specular, 0.0, 1.0), 200.0));
    } else {
        intensity = diffuse + vec3(1.0)*(0.25*pow(clamp(specular, 0.0, 1.0), 200.0));
    }

    if (shadowType == 1) {
        vec3 cshadow = pow(vec3(shadow), vec3(1.0, 1.2, 1.5));
        intensity = mix(col, col*cshadow*(1.0-SHADOW_OPACITY), shadow/shadowRayCount);
    } else if (shadowType == 2 || shadowType == 3) {
        intensity *= shadow;
    }

        #if SHADES != 0
    intensity = ceil(intensity * SHADES) / float(SHADES);
    #endif
    col *= intensity;
    return col;
}

RenderResult render(vec3 rayOrigin, vec3 rayDir) {
    IntersectionResult intersectionResult = castRay(rayOrigin, rayDir);
    vec3 col;
    if (intersectionResult.minDist <= -1.0) {
        col = vec3(0.30, 0.36, 0.60) - (rayDir.y * 0.7);
    } else {
        vec3 pos = rayOrigin + rayDir * intersectionResult.minDist;
        vec3 lightDir = normalize(lightPos);//-pos);
        vec3 normal = calcNormal(pos);

        col = shading(pos, normal, lightDir, rayDir, true);


        for (int i = 0; i < 4; i++) {
            rayDir = reflect(rayDir, normal);
            IntersectionResult reflIntersectionResult = castReflRay(pos + normal * 0.001, rayDir);
            if (reflIntersectionResult.minDist > -1.0) {
                pos = pos + rayDir * reflIntersectionResult.minDist;
                normal = calcNormal(pos);
                vec3 reflColor = shading(pos, normal, lightDir, rayDir, true);
                col += reflColor * 0.2;
            }
        }

        //col = normal;
        //col = smoothstep(0.0,1.0,col);
        if (enableAmbientOcclusion) {
            //col *= (1.0-vec3(intersectionResult.steps/stepLimit));
            col *= calcAO(pos, normal);
        }
    }

    RenderResult result;
    result.color = vec4(col, 1);
    result.stepCount = intersectionResult.steps;
    result.depth = intersectionResult.minDist;
    return result;
}

vec2 normalizeScreenCoords(vec2 screenCoord) {
    vec2 result = 2.0 * (screenCoord/resolution.xy - 0.5);
    result.x *= resolution.x/float(resolution.y);// Correct for aspect ratio
    return result;
}

float logNormalize(float enteredValue, float minEntry, float maxEntry, float normalizedMin, float normalizedMax) {

    float mx = (log((enteredValue-minEntry))/(log(maxEntry-minEntry)));
    float preshiftNormalized = mx*(normalizedMax-normalizedMin);
    float shiftedNormalized = preshiftNormalized + normalizedMin;

    return shiftedNormalized;

}

void main() {
    if (gl_GlobalInvocationID.x >= resolution.x || gl_GlobalInvocationID.y >= resolution.y) {
        return;
    }

    RenderResult renderResult;
    if (enableAntiAliasing) {
        vec4 resColor = vec4(0);
        float count = 0.0;
        for (float aaY = 0.0; aaY < AA_size; aaY++) {
            for (float aaX = 0.0; aaX < AA_size; aaX++) {
                vec2 screenCoord = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
                vec2 uv = normalizeScreenCoords(screenCoord + vec2(aaX, aaY) / AA_size);
                vec3 rayDir = getCameraRayDir(uv, cameraPosition, cameraFront);
                renderResult = render(cameraPosition, rayDir);
                resColor += renderResult.color;
                count += 1.0;
            }
        }
        resColor /= count;
        renderResult.color = resColor;
    } else {
        vec2 screenCoord = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
        vec2 uv = normalizeScreenCoords(screenCoord);
        vec3 rayDir = getCameraRayDir(uv, cameraPosition, cameraFront);
        renderResult = render(cameraPosition, rayDir);
    }

    float logStepColor = logNormalize(renderResult.stepCount, 0, stepLimit, 0, 1);
    float stepColor = renderResult.stepCount / float(64);
    //renderResult.color += stepColor * vec4(1, 0, 0, 0);
    const ivec2 texCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    imageStore(stepCountTexture, texCoord, vec4(logStepColor, 0, 0, 0));
    imageStore(renderTexture, texCoord, renderResult.color);
    imageStore(depthTexture, texCoord, vec4(renderResult.depth / maxDrawDistance, 0, 0, 0));
}