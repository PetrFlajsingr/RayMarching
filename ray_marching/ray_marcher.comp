#version 450

layout (local_size_x = 32, local_size_y = 32) in;
layout (rgba32f, binding = 0) uniform image2D renderTexture;
layout (r32f, binding = 1) uniform image2D stepCountTexture;
layout (r32f, binding = 2) uniform image2D depthTexture;

uniform int shadowType;

uniform ivec2 resolution;
uniform int stepLimit;
uniform int shadowStepLimit;

uniform float time;
uniform float maxDrawDistance;

uniform vec3 cameraPosition;
uniform vec3 cameraFront;

uniform bool enableAmbientOcclusion;
uniform bool enableAntiAliasing;
uniform bool enableReflections;

uniform int maxReflections;

uniform float AA_size;

const vec3 lightPos = vec3(20, 25, 1 + cos(time / 10) * 100);// TODO

#define SHADES 0

#define EPSILON  0.001
#define SHADOW_FALLOFF 0.001
#define SHADOW_OPACITY 0.8

struct RenderResult {
    vec4 color;
    float depth;
    int stepCount;
};
struct IntersectionResult {
    float minDist;
    float mat;
    int steps;
};
struct Ray {
    vec3 origin;
    vec3 direction;
};


vec3 getCameraRayDir(vec2 coord, vec3 camPos, vec3 camForward) {
    const vec3 camRight = normalize(cross(vec3(0.0, 1.0, 0.0), camForward));
    const vec3 camUp = normalize(cross(camForward, camRight));
    const float fPersp = 2;// TODO
    const vec3 vDir = normalize(coord.x * camRight + coord.y * camUp + camForward * fPersp);
    return vDir;
}


vec2 distToObjects(vec3 camPos) {
    camPos = opRepLim(camPos, vec3(500.0, 1000.0, 500.0), vec3(10.0, 0.0, 10.0));
    return
    opBlend(
    opBlend(
    vec2(sdBox(camPos - vec3(0.0, -15.0, 0.0), vec3(30.0, 1.0, 30.0))), opBlend(
    vec2(sdSphere(camPos - vec3(0.0, 500.0, 0.0), 10.0)), vec2(sdBox(camPos - vec3(0.0, -12.0, 0.0), vec3(4.0, 500.0, 4.0))), 500.0
    ), 100.0
    ),
    vec2(sdBox(camPos - vec3(0.0, -10.0, 0.0), vec3(100000.0, 1, 100000.0)))
    , 250.0
    )
    ;
}

IntersectionResult castRay(Ray ray) {
    float travelDistance = 0.0;
    const float boundOptimisation = 1;
    IntersectionResult result;
    result.mat = -1.0;
    for (result.steps = 0; result.steps < stepLimit; result.steps++) {
        const vec2 res = distToObjects(ray.origin + ray.direction * travelDistance * boundOptimisation);
        travelDistance += res.x;
        result.mat = res.y;
        if (res.x < EPSILON) {
            result.minDist = travelDistance;
            return result;
        } else if (travelDistance > maxDrawDistance) {
            result.mat = -1;
            result.minDist = -1.0;
            return result;
        }
    }
    result.minDist = travelDistance;
    return result;
}


IntersectionResult castRefrRay(Ray ray, float distanceFactor) {
    float travelDistance = 0.0;
    IntersectionResult result;
    result.mat = -1.0;
    for (result.steps = 0; result.steps < stepLimit; result.steps++) {
        const vec2 res = distanceFactor * distToObjects(ray.origin + ray.direction * travelDistance);
        travelDistance += res.x;
        result.mat = res.y;
        if (res.x < EPSILON) {
            //result.mat = -1;
            result.minDist = travelDistance;
            return result;
        } else if (travelDistance > maxDrawDistance) {
            result.mat = -1;
            result.minDist = -1.0;
            return result;
        }
    }
    result.minDist = travelDistance;
    return result;
}

IntersectionResult castReflRay(Ray ray) {
    float travelDistance = 0.0;
    IntersectionResult result;
    result.mat = -1.0;
    for (result.steps = 0; result.steps < stepLimit; result.steps++) {
        const vec2 res = distToObjects(ray.origin + ray.direction * travelDistance);
        travelDistance += res.x;
        result.mat = res.y;
        if (res.x < EPSILON * 2) {
            //result.mat = -1;
            result.minDist = travelDistance;
            return result;
        } else if (travelDistance > maxDrawDistance) {
            result.mat = -1;
            result.minDist = -1.0;
            return result;
        }
    }
    result.minDist = travelDistance;
    return result;
}

    #define MAX_SCATTER_RAYS 50


vec3 castScatterRay(Ray ray) {
    vec3 objectSurfaceColour = vec3(0.4, 0.8, 0.1);
    vec3 density = pow(objectSurfaceColour, vec3(.4));
    vec3 visibility = vec3(1.);

    float lastVal = distToObjects(ray.origin).x;
    float soft = 0.0;
    for (int i=0; i < MAX_SCATTER_RAYS; i++)
    {
        if (visibility.x < EPSILON)
        continue;

        float val = distToObjects(ray.origin).x;
        vec3 softened = pow(density, vec3(smoothstep(soft, -soft, val)));
        //tweak this to create soft shadows, by expanding with each step (linearly)

        if ((val-soft)*lastVal < 0.0){
            // approximate position of the surface
            float transition = -min(val-soft, lastVal)/abs(val-soft-lastVal);
            visibility *= pow(softened, vec3(transition));
        } else if (val-soft < 0.0) {
            visibility *= softened;
        }

        soft += .1;
        lastVal = val+soft;
        ray.origin += ray.direction*.4;
    }

    return visibility;
}

vec3 calcNormal(vec3 pos) {
    const float h = 0.001;
    const vec2 k = vec2(1, -1);
    return normalize(
    k.xyy * distToObjects(pos + k.xyy * h).x +
    k.yyx * distToObjects(pos + k.yyx * h).x +
    k.yxy * distToObjects(pos + k.yxy * h).x +
    k.xxx * distToObjects(pos + k.xxx * h).x
    );
}

float softshadow(Ray ray, float minTravel, float maxTravel, float k) {
    float res = 1.0;
    float ph = 1e20;
    int i = 0;
    for (float t = minTravel; i < shadowStepLimit && t < maxTravel; i++) {
        const float h = distToObjects(ray.origin + ray.direction * t).x;
        if (h < EPSILON) {
            return 0.0;
        }
        const float y = h * h / (2.0 * ph);
        const float d = sqrt(h * h - y * y);
        res = min(res, k * d / max(0.0, t - y));
        ph = h;
        t += h;
    }
    return clamp(res, 0.0, 1.0);
}

float getShadowMultiplier(Ray ray, vec3 normal){
    return softshadow(ray, 0.01, maxDrawDistance, 50);
}

float getHardShadowMultiplier(Ray ray, vec3 normal) {
    ray.direction = normalize(ray.direction);
    float minTravel = 0.01;
    float maxTravel = maxDrawDistance;
    int i = 0;
    for (float t = minTravel; i < shadowStepLimit && t < maxTravel; i++) {
        const float h = distToObjects(ray.origin + ray.direction * t).x;
        if (h < EPSILON) {
            return 0.0;
        }
        t += h;
    }
    return 1.0;
}

float calcAO(vec3 pos, vec3 nor) {
    float occ = 0.0;
    float sca = 1.0;
    for (int i = 0; i < 5; i++) {
        const float h = 0.001 + 0.15 * float(i) / 4.0;
        const float d = distToObjects(pos + h * nor).x;
        occ += (h - d) * sca;
        sca *= 0.95;
    }
    return clamp(1.0 - 1.5 * occ, 0.0, 1.0);
}

vec3 shading(Ray ray, vec3 normal, vec3 lightDir, bool checkShadow) {
    vec3 col;
    float shadow = 0.0;
    float shadowRayCount = 2.0;
    vec3 pos = ray.origin;
    if (checkShadow) {
        ray.origin += normal * 0.01;
        if (shadowType == 1) {
            for (float s = 0.0; s < shadowRayCount; s++)
            {
                float r = rand(vec2(ray.direction.xy)) * 2.0 - 1.0;
                Ray shadowRay;
                shadowRay.origin = ray.origin;
                shadowRay.direction = lightDir + vec3(1.0 * SHADOW_FALLOFF) * r;
                IntersectionResult shadowRayIntersection = castRay(shadowRay);
                if (shadowRayIntersection.mat != -1.0)
                {
                    shadow += 1.0;
                }
            }
        } else if (shadowType == 2) {
            Ray shadowRay;
            shadowRay.origin = ray.origin;
            shadowRay.direction = lightDir;
            shadow = getShadowMultiplier(shadowRay, normal);
        } else if (shadowType == 3) {
            Ray shadowRay;
            shadowRay.origin = ray.origin;
            shadowRay.direction = lightDir;
            shadow = getHardShadowMultiplier(shadowRay, normal);
        }
    } else {
        shadow = 1.0;
    }


    vec3 objectSurfaceColour = vec3(0.4, 0.8, 0.1);
    float NoL = max(dot(normal, lightDir), 0.0);
    vec3 LDirectional = vec3(0.9, 0.9, 0.8) * NoL;
    vec3 LAmbient = vec3(0.03, 0.04, 0.1);
    vec3 diffuse = (LDirectional + LAmbient);
    float specular = dot(normalize(lightPos-pos), reflect(normalize(pos-cameraPosition), normal));
    col = objectSurfaceColour;
    vec3 intensity;
    if (shadowType == 1) {
        intensity = diffuse + vec3(1.0)*(0.25*pow(clamp(specular, 0.0, 1.0), 200.0));
    } else if (shadowType != 0) {
        intensity = diffuse + clamp(shadow - 0.5, 0, 1)  * vec3(1.0)*(0.25*pow(clamp(specular, 0.0, 1.0), 200.0));
    } else {
        intensity = diffuse + vec3(1.0)*(0.25*pow(clamp(specular, 0.0, 1.0), 200.0));
    }

    if (shadowType == 1) {
        intensity *= 1 - shadow;
        //vec3 cshadow = pow(vec3(shadow), vec3(1.0, 1.2, 1.5));
        //intensity = mix(col, col*cshadow*(1.0-SHADOW_OPACITY), shadow/shadowRayCount);
    } else if (shadowType == 2 || shadowType == 3) {
        intensity *= shadow;
    }

        #if SHADES != 0
    intensity = ceil(intensity * SHADES) / float(SHADES);
    #endif
    col *= intensity;
    return col;
}


vec4 subSurfaceShading(vec3 pos, vec3 normal, vec3 lightDir, vec3 rayDir, vec3 visibility) {
    vec3 albedo = vec3(1);
    const vec3 fillLightDir = lightDir;
    const vec3 lightColour = vec3(1, 1, 1);
    const vec3 fillLightColour = vec3(1, 0, 1);
    vec3 l = lightColour*mix(visibility, vec3(1)*max(0.0, dot(normal, normalize(lightDir))), .0);
    vec3 fl = fillLightColour*(dot(normal, normalize(fillLightDir))*.5+.5);

    vec3 view = normalize(-rayDir);
    vec3 h = normalize(view+lightDir);
    float specular = pow(max(0.0, dot(h, normal)), 2000.0);

    float fresnel = pow(1.0 - dot(view, normal), 5.0);
    fresnel = mix(.01, 1.0, min(1.0, fresnel));

    //fresnel = 0.0;

    return vec4(albedo*(l+fl)*(1.0-fresnel) + visibility*specular*32.0*lightColour, fresnel);
}

RenderResult renderRefraction(Ray ray) {
    float refractionRatio = 1.0 / 1.7;
    const int refractLimit = 15;
    float refractFactor = 0.6;

    vec3 col = vec3(0);
    vec3 lightDir = normalize(lightPos);
    float distanceFactor = 1.0;
    int stepCount = 0;
    int rayIndex = 0;
    float intensity = 1.0;
    for (rayIndex = 0; rayIndex < 15; rayIndex++) {
        IntersectionResult intersectionResult = castRefrRay(ray, distanceFactor);
        stepCount += intersectionResult.steps;
        if (intersectionResult.minDist <= -1.0) {
            col = col * (1.0 - intensity) + (vec3(0.30, 0.36, 0.60) - (ray.direction.y * 0.7)) * intensity;
            break;
        } else {
            ray.origin = ray.origin + ray.direction * intersectionResult.minDist;
            vec3 normal = distanceFactor * calcNormal(ray.origin);

            if (distanceFactor > 0) {
                const vec3 objColor = shading(ray, normal, lightDir, true);
                col = col * (1.0 - intensity) + objColor * intensity;
                intensity *= refractFactor;
            }

            vec3 refraction = refract(ray.direction, normal, refractionRatio);
            if (dot(refraction, refraction) < EPSILON) {
                ray.direction = reflect(ray.direction, normal);
                ray.origin += ray.direction * EPSILON * 10;
            } else {
                ray.direction = refraction;
                ray.origin += ray.direction * EPSILON * 10;
                distanceFactor = -distanceFactor;
                refractionRatio = 1.0 / refractionRatio;
            }
        }
    }
    RenderResult result;
    result.color = vec4(col / (0.6 * (rayIndex + 1)), 1);
    result.stepCount = stepCount;
    return result;
}

RenderResult renderScattering(Ray ray) {
    IntersectionResult intersectionResult = castRay(ray);
    vec4 col = vec4(1.0);
    if (intersectionResult.minDist <= -1.0) {
        col = vec4(vec3(0.30, 0.36, 0.60) - (ray.direction.y * 0.7), 1);
    } else {
        ray.origin += ray.direction * intersectionResult.minDist;
        vec3 lightDir = normalize(lightPos);//-pos);
        vec3 normal = calcNormal(ray.origin);

        Ray subsurfaceRay;
        subsurfaceRay.origin = ray.origin + ray.direction;
        subsurfaceRay.direction = lightDir;
        vec3 subsurface = castScatterRay(subsurfaceRay);
        col = subSurfaceShading(subsurfaceRay.origin, normal, lightDir, ray.direction, subsurface);

        //col = normal;
        //col = smoothstep(0.0,1.0,col);
        if (enableAmbientOcclusion) {
            //col *= (1.0-vec3(intersectionResult.steps/stepLimit));
            col *= calcAO(ray.origin, normal);
        }
    }

    RenderResult result;
    result.color = col;
    result.stepCount = intersectionResult.steps;
    result.depth = intersectionResult.minDist;
    return result;
}


RenderResult render(Ray ray) {
    //return renderScattering(ray);
    //return renderRefraction(ray);
    IntersectionResult intersectionResult = castRay(ray);
    vec3 col;
    int steps = intersectionResult.steps;
    float depth = intersectionResult.minDist;
    if (intersectionResult.minDist <= -1.0) {
        col = vec3(0.30, 0.36, 0.60) - (ray.direction.y * 0.7);
    } else {
        ray.origin += ray.direction * intersectionResult.minDist;
        vec3 lightDir = normalize(lightPos);//-pos);
        vec3 normal = calcNormal(ray.origin);

        col = shading(ray, normal, lightDir, true);

        if (enableReflections) {
            vec3 reflColor = vec3(0);
            int i = 0;
            for (i = 0; i < maxReflections; i++) {
                ray.direction = reflect(ray.direction, normal);
                ray.origin += ray.direction * 0.01;
                IntersectionResult reflIntersectionResult = castReflRay(ray);
                if (reflIntersectionResult.minDist > -1.0) {
                    ray.origin += ray.direction * reflIntersectionResult.minDist;
                    normal = calcNormal(ray.origin);
                    vec3 targetColor = shading(ray, normal, lightDir, true);
                    reflColor += targetColor * 0.5;
                } else {
                    reflColor += (vec3(0.30, 0.36, 0.60) - (ray.direction.y * 0.7)) * 0.5;
                }
                steps += intersectionResult.steps;
            }
            col += reflColor / i;
        }

        //col = normal;
        //col = smoothstep(0.0,1.0,col);
        if (enableAmbientOcclusion) {
            //col *= (1.0-vec3(intersectionResult.steps/stepLimit));
            col *= calcAO(ray.origin, normal);
        }
    }

    RenderResult result;
    result.color = vec4(col, 1);
    result.stepCount = steps;
    result.depth = depth;
    return result;
}

vec2 normalizeScreenCoords(vec2 screenCoord) {
    vec2 result = 2.0 * (screenCoord/resolution.xy - 0.5);
    result.x *= resolution.x/float(resolution.y);// Correct for aspect ratio
    return result;
}


float logNormalize(float enteredValue, float minEntry, float maxEntry, float normalizedMin, float normalizedMax) {

    float mx = (log((enteredValue-minEntry))/(log(maxEntry-minEntry)));
    float preshiftNormalized = mx*(normalizedMax-normalizedMin);
    float shiftedNormalized = preshiftNormalized + normalizedMin;

    return shiftedNormalized;
}

vec3 applyFog(in vec3  rgb, // original color of the pixel
in float distance, // camera to point distance
in vec3  rayOri, // camera position
in vec3  rayDir)// camera to point vector
{ ;
    float b = 0.05;
    float c = 0.2;
    float fogAmount = c * exp(-rayOri.y*b) * (1.0-exp(-distance*rayDir.y*b))/rayDir.y;
    vec3  fogColor  = vec3(0.5, 0.5, 0.5);
    return mix(rgb, fogColor, fogAmount);
}

void main() {
    if (gl_GlobalInvocationID.x >= resolution.x || gl_GlobalInvocationID.y >= resolution.y) {
        return;
    }
    const ivec2 texCoord = ivec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);

    RenderResult renderResult;
    vec2 screenCoord = vec2(gl_GlobalInvocationID.x, gl_GlobalInvocationID.y);
    vec2 uv = normalizeScreenCoords(screenCoord);
    Ray ray;
    ray.origin = cameraPosition;
    ray.direction = getCameraRayDir(uv, cameraPosition, cameraFront);
    if (enableAntiAliasing) {
        vec4 resColor = vec4(0);
        float count = 0.0;
        for (float aaY = 0.0; aaY < AA_size; aaY++) {
            for (float aaX = 0.0; aaX < AA_size; aaX++) {
                vec2 uv = normalizeScreenCoords(screenCoord + vec2(aaX, aaY) / AA_size);
                ray.direction = getCameraRayDir(uv, cameraPosition, cameraFront);
                renderResult = render(ray);
                resColor += renderResult.color;
                count += 1.0;
            }
        }
        resColor /= count;
        renderResult.color = resColor;
    } else {
        renderResult = render(ray);
    }
    renderResult.color = vec4(pow(renderResult.color.xyz, vec3(0.4545)), renderResult.color.w);
    vec2 q = vec2(texCoord) / vec2(resolution.xy);
    renderResult.color = vec4(renderResult.color.xyz * (0.8 + 0.3*sqrt(16.0*q.x*q.y*(1.0-q.x)*(1.0-q.y))), renderResult.color.w);


    float logStepColor = logNormalize(renderResult.stepCount, 0, stepLimit, 0, 1);
    float logDepth = logNormalize(renderResult.depth, 0, maxDrawDistance, 0, 1);
    float stepColor = renderResult.stepCount / float(64);
    //renderResult.color += stepColor * vec4(1, 0, 0, 0);

    imageStore(stepCountTexture, texCoord, vec4(logStepColor, 0, 0, 0));
    imageStore(renderTexture, texCoord, renderResult.color);
    imageStore(depthTexture, texCoord, vec4(logDepth, 0, 0, 0));
}